INSERT INTO `article`(`id`, `title`, `content`, `summarize`, `author`, `coverImage`, `type`, `tags`, `numberOfComment`, `numberOfLike`, `numberOfView`, `isView`, `isPublicCommentArea`, `isAllowedTurn`, `createTime`) VALUES (1, '我一学计算机的，请问为什么计算机专业要学《大学物理》，真的不知道学来干什么？', '哎，这个题蛮有意思，根据我几十年的读书经验，我来给你说说（胡说八道）。太长不读版：其实题主感觉没啥大问题，\n     你说学杂七杂八的课程有没有用。我真不敢打包票说有用。但如果你们学校要求选这些课，但是你考的不好，将来却需要拿成绩去申请工作或是考研出国，\n     那你会吃大亏。至于你计算机不错，大学毕业就能找不错的工作，那你只要能考及格也行吧。在国内的时候，我们有毛邓三，还有大学英语和语文。\n     我个人感觉哈，这些课确实对我没啥帮助，也让我拿了好多低分。说起大学物理，更是让我气不打一出来。不怕残酷，\n     我大学物理好像是七十多和八十多，真tm把我绩点拉到爆炸。你说这些课有用没用？我给你讲句实话，\n     我大学的课程对我现在的事业确实没啥luan用。我大学高分子，研究生化学。现在跑来it搬砖，你说那些课程直接的用处嘛，\n     那真的可以忽略不计。但你说大学学到了东西没有呢？我觉得还是学到了一些的。至少学会应付考试也不错，学会一些七七八八的概念也还行。\n     讲国外的本科教育吧。国外一般大家比较注重素质教育。会让文科生选一些core science的课。所谓core science，没错，就是生化物理这些课了。\n     我记得我带化学实验课的时候，那些学生都快哭了。他们不仅仅是化学不好，天平也不会用。说实话，我自己学化学的，我也用不好那些破仪器，\n     滴定实验我也没耐心找到滴定点。但国内外都一样，这些就是课程安排，你不会也的学。关键他不是选修，你讨论有没有用并没有卵用，\n     除非你能让教务处从你培养计划里面把它们去掉。', '哎，这个题蛮有意思，根据我几十年的读书经验，我来给你说说（胡说八道）。太长不读版：其实题主感觉没啥大问题，\n     你说学杂七杂八的课程有没有用。我真不敢打包票说有用。但如果你们学校要求选这些课，但是你考的不好，将来却需要拿成绩去申请工作或是考研出国，\n     那你会吃大亏。至于你计算机不错，大学毕业就能找不错的工作，那你只要能考及格也行吧。在国内的时候，我们有毛邓三，还有大学英语和语文', 'admin', '/imgs/articleCoverImg/1.jpg', '原创', '生活随笔,技术分享,知识总结', 190, 193, 89, 1, 1, 1, '2022-03-12');
INSERT INTO `article`(`id`, `title`, `content`, `summarize`, `author`, `coverImage`, `type`, `tags`, `numberOfComment`, `numberOfLike`, `numberOfView`, `isView`, `isPublicCommentArea`, `isAllowedTurn`, `createTime`) VALUES (2, '如果一个屌丝长着帅比的脸，家境一般，学渣，有前途么？', '很有前途。我认识一个。确实挺屌丝的。大学同学，北京郊区人，身高185，白，有腹肌，脸像某个明星。家境很一般，父亲是出租司机，母亲经营小卖部。学渣，他不是不学习，其他人自习他也自习，但GPA一直倒数。除了班里两个完全不学习自我放弃的（俩人挂科很多），他的成绩最差。性格也屌丝，不参加社团活动，不参加比赛，运动不算多偶尔去打打篮球，抽烟，天天宅宿舍里熬夜打游戏。大一大二时候他的腹肌是高中打篮球留下的底子，大三大四的时候他偶尔去健身房。下面说说前途。大一入学开始就有女生和他表白，那会儿他有个高中谈的女朋友，很有钱那种，在英国读本科。后来因为异国，他和高中女朋友和平分手，然后在学校里追他的女生中挑了个最有钱的。俩人正式交往一个多月，女生给他买辆车。后来大三开始他去酒吧，玩约炮，专门约熟女人妻。被女朋友发现了，女朋友寻死觅活一年多，他就是不愿意放弃约炮熟女事业。最后俩人分手。他的说法，女朋友太优秀太有钱，他配不上，女方家里也不接受他。事实可能也是如此，分手后女生本科毕业直接进体制，没两年女生家里介绍嫁了个很年轻的科长。扯远了。这会儿大四毕业季，他找不到合适的工作，又赶上分手，心里苦闷去健身房排解，还兼职了两天健身教练。然后被吓回来了。据他说，健身房里有老板买他课，一边摸他大腿一边问听说你是名牌大学生在找工作，要不要跟哥混，哥保你吃香喝辣。他不喜欢男人。毕业后他找了份工作，国际大品牌，底层小销售。北京分区的团队老大是个四十多岁的未婚女强人，他去的第一天就把他叫进办公室谈心两个小时，没一句正经的。后来每天找他谈心两个小时。团队里其他妹子没人敢和他说话，谁说话女强人就骂谁。有没有搞上，他没和我们说。本科毕业第一年他工资加提成三十多万，没算年终奖。我们是天坑专业。再后来的事情就不知道了，看朋友圈，他日子过得不错。', '大学同学，北京郊区人，身高185，白，有腹肌，脸像某个明星。家境很一般，父亲是出租司机，母亲经营小卖部。学渣，他不是不学习，其他人自习他也自习，但GPA一直倒数。除了班里两个完全不学习自我放弃的（俩人挂科很多），他的成绩最差。性格也屌丝，不参加社团活动，不参加比赛，运动不算多偶尔去打打篮球，抽烟，天天宅宿舍里熬夜打游戏。大一大二时候他的腹肌是高中打篮球留下的底子，大三大四的时候他偶尔去健身房。', 'admin', '/imgs/articleCoverImg/2.jpg', '原创', '生活随笔,技术分享,知识总结', 67, 58, 16, 1, 1, 1, '2022-05-23');
INSERT INTO `article`(`id`, `title`, `content`, `summarize`, `author`, `coverImage`, `type`, `tags`, `numberOfComment`, `numberOfLike`, `numberOfView`, `isView`, `isPublicCommentArea`, `isAllowedTurn`, `createTime`) VALUES (12, 'Linux操作系统基础', '<div class=\"el-card__body\"><p data-v-25e5a8ac=\"\"><b>Linux简介</b><strike><b><code></code></b></strike><u></u></p><p data-v-25e5a8ac=\"\"><b></b>Linux是一种自由和开放源码的操作系统，存在着许多不<strike></strike><u></u><i></i>同的Linux版本，但它们都使用了Linux内核。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、台式计算机</p><p data-v-25e5a8ac=\"\"><code></code><img src=\"https://img2.baidu.com/it/u=724981374,1960120145&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG?w=1082&amp;h=500\" style=\"max-width:100%;\" contenteditable=\"false\"/><br/></p><p data-v-25e5a8ac=\"\"><b>Linux介绍</b><br/>Linux出现于1991年，是由芬兰赫尔辛基大学学生Linus Torvalds和后来加入的众多爱好者共同开发完成<br/><b><br/>Linux特点</b><br/>多用户，多任务，丰富的网络功能，可靠的系统安全，良好的可移植性，具有标准兼容性，良好的用户界面，出色的速度性能<br/>开源<br/><br/><b>CentOS</b><br/>主流：目前的Linux操作系统主要应用于生产环境，主流企业级Linux系统仍旧是RedHat或者CentOS<br/>免费：RedHat 和CentOS差别不大，基于Red Hat Linux 提供的可自由使用源代码的企业CentOS是一个级Linux发行版本<br/>更新方便：CentOS独有的yum命令支持在线升级，可以即时更新系统，不像RedHat 那样需要花钱购买支持服务！<br/><br/></p><p data-v-25e5a8ac=\"\"><b>Linux目录结构</b></p><p data-v-25e5a8ac=\"\"><img src=\"https://img1.baidu.com/it/u=859953754,3281229611&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG?w=499&amp;h=229\" style=\"max-width:100%;\" contenteditable=\"false\"/><br/></p><p data-v-25e5a8ac=\"\">bin (binaries)存放二进制可执行文件<br/>sbin (super user binaries)存放二进制可执行文件，只有root才能访问<br/>etc (etcetera)存放系统配置文件<br/>usr (unix shared resources)用于存放共享的系统资源<br/>home 存放用户文件的根目录<br/>root 超级用户目录<br/>dev (devices)用于存放设备文件<br/>lib (library)存放跟文件系统中的程序运行所需要的共享库及内核模块<br/>mnt (mount)系统管理员安装临时文件系统的安装点<br/>boot 存放用于系统引导时使用的各种文件<br/>tmp (temporary)用于存放各种临时文件<br/>var (variable)用于存放运行时需要改变数据的文件</p><p data-v-25e5a8ac=\"\"><br/></p><p data-v-25e5a8ac=\"\"><br/><b>Linux常用命令</b><br/>命令格式：命令 -选项 参数<br/><br/>如：ls  -la  /usr<br/><br/>ls：显示文件和目录列表(list)<br/></p><pre><code class=\"Bash\">如：ls  -la  /usr\n\nls：显示文件和目录列表(list)\n</code></pre><p data-v-25e5a8ac=\"\">常用参数：<br/></p><pre><code class=\"Bash\">-l		(long)\n-a	(all)         注意隐藏文件、特殊目录.和..   \n-t		(time)\n</code></pre><p data-v-25e5a8ac=\"\"><br/><b>Linux命令的分类</b><br/>内部命令：属于Shell解析器的一部分<br/></p><pre><code class=\"Bash\">cd 切换目录（change directory）\npwd 显示当前工作目录（print working directory）\nhelp 帮助\n</code></pre><p data-v-25e5a8ac=\"\"><br/>外部命令：独立于Shell解析器之外的文件程序<br/></p><pre><code class=\"Bash\">ls 显示文件和目录列表（list）\nmkdir 创建目录（make directoriy）\ncp 复制文件或目录（copy）\n</code></pre><p data-v-25e5a8ac=\"\"><br/><b>查看帮助文档</b><br/></p><pre><code class=\"Bash\">内部命令：help + 命令（help cd）\n外部命令：man + 命令（man ls）\n</code></pre><p data-v-25e5a8ac=\"\"><br/>操作文件或目录常用命令<br/></p><pre><code class=\"Bash\">pwd 显示当前工作目录（print working directory）\ntouch 创建空文件				                    \nmkdir 创建目录（make directoriy）\n-p 父目录不存在情况下先生成父目录 （parents）            \ncp 复制文件或目录（copy）\n-r 递归处理，将指定目录下的文件与子目录一并拷贝（recursive）     \nmv 移动文件或目录、文件或目录改名（move）\n\nrm 删除文件（remove）\n-r 同时删除该目录下的所有文件（recursive）\n-f 强制删除文件或目录（force）\nrmdir 删除空目录（remove directoriy）\ncat显示文本文件内容 （catenate）\nmore、less 分页显示文本文件内容\nhead、tail查看文本中开头或结尾部分的内容\nhead -n  5  a.log 查看a.log文件的前5行\ntail  -F b.log 循环读取（follow）\n\n</code></pre><p data-v-25e5a8ac=\"\">常用命令<br/></p><pre><code class=\"Bash\">wc 统计文本的行数、字数、字符数（word count）\n-m 统计文本字符数\n-w 统计文本字数\n-l 统计文本行数\nfind 在文件系统中查找指定的文件\nfind /etc/ -name \"aaa\"\ngrep 在指定的文本文件中查找指定的字符串\nln 建立链接文件（link）\n-s 对源文件建立符号连接，而非硬连接（symbolic）\n\ntop 显示当前系统中耗费资源最多的进程 \nps 显示瞬间的进程状态\n-e /-A 显示所有进程，环境变量\n-f 全格式\n-a 显示所有用户的所有进程（包括其它用户）\n-u 按用户名和启动时间的顺序来显示进程\n-x 显示无控制终端的进程\nkill 杀死一个进程\nkill -9 pid\ndf 显示文件系统磁盘空间的使用情况\n\ndu 显示指定的文件（目录）已使用的磁盘空间的总\n-h文件大小以K，M，G为单位显示（human-readable）\n-s只显示各档案大小的总合（summarize）\nfree 显示当前内存和交换空间的使用情况 \nnetstat 显示网络状态信息\n-a 显示所有连接和监听端口\n-t (tcp)仅显示tcp相关选项\n-u (udp)仅显示udp相关选项\n-n 拒绝显示别名，能显示数字的全部转化成数字。\n-p 显示建立相关链接的程序名\nifconfig 网卡网络配置详解 \nping 测试网络的连通性 \n\n</code></pre><p data-v-25e5a8ac=\"\">备份压缩命令<br/></p><pre><code class=\"Bash\">gzip 压缩（解压）文件或目录，压缩文件后缀为gz \nbzip2 压缩（解压）文件或目录，压缩文件后缀为bz2 \ntar 文件、目录打（解）包\n\n</code></pre><p data-v-25e5a8ac=\"\">gzip命令<br/></p><pre><code class=\"Bash\">命令格式：gzip [选项] 压缩（解压缩）的文件名\n-d将压缩文件解压（decompress）\n-l显示压缩文件的大小，未压缩文件的大小，压缩比（list）\n-v显示文件名和压缩比（verbose）\n-num用指定的数字num调整压缩的速度，-1或--fast表示最快压缩方法（低压缩比），-9或--best表示最慢压缩方法（高压缩比）。系统缺省值为6\n\n</code></pre><p data-v-25e5a8ac=\"\">bzip2命令<br/></p><pre><code class=\"Bash\">命令格式：bzip2 [-cdz] 文档名\n-c将压缩的过程产生的数据输出到屏幕上\n-d解压缩的参数（decompress）\n-z压缩的参数（compress）\n-num 用指定的数字num调整压缩的速度，-1或--fast表示最快压缩方法（低压缩比），-9或--best表示最慢压缩方法（高压缩比）。系统缺省值为6\n</code></pre><p data-v-25e5a8ac=\"\">tar命令<br/></p><pre><code class=\"Bash\">-c 建立一个压缩文件的参数指令（create）\n-x 解开一个压缩文件的参数指令（extract）\n-z 是否需要用 gzip 压缩\n-j 是否需要用 bzip2 压缩\n-v 压缩的过程中显示文件（verbose）\n-f 使用档名，在 f 之后要立即接档名（file）\n\n</code></pre><p data-v-25e5a8ac=\"\">关机/重启命令<br/></p><pre><code class=\"Bash\">shutdown系统关机 \n-r 关机后立即重启\n-h 关机后不重新启动\nhalt 关机后关闭电源 shutdown -h\nreboot 重新启动 shutdown -r\n</code></pre><p data-v-25e5a8ac=\"\">学习Linux的好习惯<br/>善于查看man page（manual）等帮助文档<br/><br/>利用好Tab键<br/><br/>掌握好一些快捷键</p><pre><code class=\"Bash\"> ctrl + c（停止当前进程）\n ctrl + r（查看命令历史）\n ctrl + l（清屏，与clear命令作用相同）</code></pre><p data-v-25e5a8ac=\"\"><br/> ctrl + c（停止当前进程）<br/> ctrl + r（查看命令历史）<br/> ctrl + l（清屏，与clear命令作用相同）<br/></p></div>', 'Linux是一种自由和开放源码的操作系统，存在着许多不同的Linux版本，但它们都使用了Linux内核。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、台式计算机。', '1', '/imgs/articleCoverImg/linux.jpg', '原创', '知识总结,技术分享,项目讨论', 0, 5, 2, 1, 1, 1, '2022-05-24');
INSERT INTO `article`(`id`, `title`, `content`, `summarize`, `author`, `coverImage`, `type`, `tags`, `numberOfComment`, `numberOfLike`, `numberOfView`, `isView`, `isPublicCommentArea`, `isAllowedTurn`, `createTime`) VALUES (14, 'java lambda表达式', '', '我们知道，在Java中，接口是不能实例化的，但是接口对象可以指向它的实现类对象。如果接口连实现对象都没有呢？那还可以使用匿名类的方式，', '1', '/imgs/articleCoverImg/mypicture10.jpg', '原创', '知识总结,生活随笔,技术分享', 0, 0, 1, 1, 1, 1, '2022-05-24');
INSERT INTO `article`(`id`, `title`, `content`, `summarize`, `author`, `coverImage`, `type`, `tags`, `numberOfComment`, `numberOfLike`, `numberOfView`, `isView`, `isPublicCommentArea`, `isAllowedTurn`, `createTime`) VALUES (16, 'Java 函数式接口', '<p><br></p><pre><code class=\"language-java\">//接口中只有一个待实现的方法 fly,所以这是函数式接口\r\ninterface Fly{\r\n     void fly(String name);\r\n}\r\n//接口中有两个待实现的方法 这是不是函数式接口\r\ninterface Run{\r\n    void fastRun();\r\n    void slowRun();\r\n}\r\n//接口中有两个方法,但其中一个是已经定义好的default方法，真正需要子类去实现的方法只有一个 这是函数式接口\r\ninterface Jump{\r\n    void jump();\r\n    default void highJump(){\r\n        System.out.println(\"跳的更高\");\r\n    }\r\n}\r\n</code></pre><p><br></p>', 'java', '1', '/imgs/articleCoverImg/mypicture8.jpg', '原创', '知识总结,生活随笔,技术分享', 0, 0, 1, 1, 1, 1, '2022-06-14');
INSERT INTO `article`(`id`, `title`, `content`, `summarize`, `author`, `coverImage`, `type`, `tags`, `numberOfComment`, `numberOfLike`, `numberOfView`, `isView`, `isPublicCommentArea`, `isAllowedTurn`, `createTime`) VALUES (27, '做人一定要格局大吗？', '<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;毛主席格局大吧！</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有个将领工作上出错了，毛主席很生气，一直就不见他。那个将领非常忐忑，最后找陈老总承认错误，请陈老总帮忙带话说已经认识到错误了，毛主席才手一挥：那就过去了。</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;粟大将很得毛主席欣赏，所以粟大将任总长的时候，毛主席就和他说有事就来汇报。但粟大将认为当时的防长是彭老总，还主持军委工作，他总是越过彭老总去和主席汇报不好。但主席就对粟大将有了意见。</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以呢，什么是格局大？！格局大就是抓大放小，小事没必要在意，而大事则锱铢必较。毛主席是政治家，所以他对任何政治动向是非常敏感而极其关切的，因为他要把握好中国这艘大船，所以哪怕是久经考验的粟大将，是他非常欣赏的粟大将，劳苦功高屡立奇功的粟大将，有了离心离德的苗头也要加以处理。</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上医治未病、中医治欲病、下医治已病</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以呢，真正的格局大，是更关注于未病，也不会因为私情而放纵，以至于偏离了正道。</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;毛主席、邓公前后两代伟人，一个带领我们站起来，一个带领我们富起来。</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;邓公一生三落三起，后两次落都是毛主席处理的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好人、伟人也是人，也有认识问题、也有失误、也有各自的立场，当然也就有斗争，这根本就不是什么悲剧，这就是人之常情，就是平常事。我们要对此有正确的态度：是人都会犯错误，犯了错误就应该进行批评与自我批评，而犯了错误只要认识到了错误、改正了错误，那就是好同志。</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;只有我们都有这样的态度，我们才能展开正常的人民内部的斗争与监督，才不会让歪风邪气盛行，才会我们始终走在正确的道路上！不如此，难道你看到你所尊敬的人犯了错误，你就不指出、不斗争，而是回避、甚至帮着隐瞒吗？！</p>', '好人、伟人也是人，也有认识问题、也有失误、也有各自的立场，当然也就有斗争，这根本就不是什么悲剧，这就是人之常情，就是平常事。我们要对此有正确的态度：是人都会犯错误，犯了错误就应该进行批评与自我批评，而犯了错误只要认识到了错误、改正了错误，那就是好同志。只有我们都有这样的态度，我们才能展开正常的人民内部的斗争与监督，才不会让歪风邪气盛行，才会我们始终走在正确的道路上！', '1', '/imgs/articleCoverImg/home_bg.jpg', '原创', 'Spring,网络爬虫,Sql语言', 0, 1, 3, 1, 1, 1, '2022-08-17');
INSERT INTO `article`(`id`, `title`, `content`, `summarize`, `author`, `coverImage`, `type`, `tags`, `numberOfComment`, `numberOfLike`, `numberOfView`, `isView`, `isPublicCommentArea`, `isAllowedTurn`, `createTime`) VALUES (28, 'Java 获取类或方法上的注解', '<p>Java&nbsp;获取类或方法上的注解</p><p>获取方法</p><p>Class</p><p><span style=\"color: rgb(225, 60, 57);\">Class.getAnnotations(</span>)&nbsp;获取所有的注解，包括自己声明的以及继承</p><p><span style=\"color: rgb(225, 60, 57);\">Class.getAnnotation(Class&lt;&nbsp;A&nbsp;&gt;&nbsp;annotationClass)</span>&nbsp;获取指定的注解，该注解可以是自己声明的，也可以是继承的</p><p><span style=\"color: rgb(225, 60, 57);\">Class.getDeclaredAnnotations()</span>&nbsp;获取自己声明的注解</p><hr/><p>Method</p><p><span style=\"color: rgb(225, 60, 57);\">Method.getAnnotations()</span>&nbsp;获取所有的注解，包括自己声明的以及继承的</p><p><span style=\"color: rgb(225, 60, 57);\">Method.getAnnotation(Class&lt;&nbsp;A&nbsp;&gt;&nbsp;annotationClass)</span>&nbsp;获取指定的注解，该注解可以是自己声明的，也可以是继承的</p><p><span style=\"color: rgb(225, 60, 57);\">Method.getDeclaredAnnotations()</span>&nbsp;获取自己声明的注解</p><p><br></p><p><strong>示例：</strong></p><pre><code class=\"language-java\">//自定义注解A\r\n@Documented\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target({ElementType.TYPE, ElementType.METHOD})\r\npublic @interface A {\r\n    String value() default \"\";\r\n}\r\n\r\n//自定义注解B\r\n@Documented\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target({ElementType.METHOD, ElementType.TYPE})\r\npublic @interface B {\r\n    String value() default \"\";\r\n}\r\n\r\n//使用注解\r\n@A(\"testClass\")\r\npublic class TestService {\r\n\r\n    @B(\"testMethod\")\r\n    public void sayHello() {\r\n        System.out.println(\"hello word\");\r\n    }\r\n\r\n}\r\n\r\n//获取\r\npublic static void main(String[] args) throws NoSuchMethodException {\r\n\r\n    Class&lt;?&gt; clazz = TestService.class;\r\n    System.out.println(Arrays.toString(clazz.getAnnotations()));\r\n    System.out.println(clazz.getAnnotation(A.class));\r\n    System.out.println(Arrays.toString(clazz.getDeclaredAnnotations()));\r\n\r\n    System.out.println();\r\n\r\n    Method method = clazz.getMethod(\"sayHello\", null);\r\n    System.out.println(Arrays.toString(method.getAnnotations()));\r\n    System.out.println(method.getAnnotation(B.class));\r\n    System.out.println(Arrays.toString(method.getDeclaredAnnotations()));\r\n\r\n}\r\n</code></pre><p><br></p><p><strong>注意：</strong></p><p>注解只有被定义为&nbsp;@Inherited&nbsp;才可以被子类继承</p><p>当前类或方法没有被任何注解标注时，getAnnotations()和getDeclaredAnnotations()返回空数组</p><p>方法&nbsp;getAnnotation(Class&lt;&nbsp;A&nbsp;&gt;&nbsp;annotationType)&nbsp;查询的注解不存在是会返回&nbsp;null</p><p>子类重写了父类的方法，注解无法被继承</p><p><br></p>', 'Java 获取类或方法上的注解', '1', '/imgs/articleCoverImg/1.jpg', '转载', 'Java,Spring,Git', 0, 1, 2, 1, 1, 1, '2022-09-11');
INSERT INTO `article`(`id`, `title`, `content`, `summarize`, `author`, `coverImage`, `type`, `tags`, `numberOfComment`, `numberOfLike`, `numberOfView`, `isView`, `isPublicCommentArea`, `isAllowedTurn`, `createTime`) VALUES (29, '多线程有什么用？', '<p><strong>这么解释问题吧：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;单进程单线程：一个人在一个桌子上吃菜。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;单进程多线程：多个人在同一个桌子上一起吃菜。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;多进程单线程：多个人每个人在自己的桌子上吃菜。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多线程的问题是多个人同时吃一道菜的时候容易发生争抢，例如两个人同时夹一个菜，一个人刚伸出筷子，结果伸到的时候已经被夹走菜了。。。此时就必须等一个人夹一口之后，在还给另外一个人夹菜，也就是说资源共享就会发生冲突争抢。</p><ul><li>对于&nbsp;Windows&nbsp;系统来说，【开桌子】的开销很大，因此&nbsp;Windows&nbsp;鼓励大家在一个桌子上吃菜。因此&nbsp;Windows&nbsp;多线程学习重点是要大量面对资源争抢与同步方面的问题。</li></ul><ul><li>对于&nbsp;Linux&nbsp;系统来说，【开桌子】的开销很小，因此&nbsp;Linux&nbsp;鼓励大家尽量每个人都开自己的桌子吃菜。这带来新的问题是：坐在两张不同的桌子上，说话不方便。因此，Linux&nbsp;下的学习重点大家要学习进程间通讯的方法。</li></ul><p>补充：有人对这个开桌子的开销很有兴趣。我把这个问题推广说开一下。</p><p>开桌子的意思是指创建进程。开销这里主要指的是时间开销。</p><p>可以做个实验：创建一个进程，在进程中往内存写若干数据，然后读出该数据，然后退出。此过程重复&nbsp;1000&nbsp;次，相当于创建/销毁进程&nbsp;1000&nbsp;次。在我机器上的测试结果是：</p><table style=\"\"><tbody><tr><th colSpan=\"1\" rowSpan=\"1\">UbuntuLinux&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th><th colSpan=\"1\" rowSpan=\"1\">Windows7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th></tr><tr><td colSpan=\"1\" rowSpan=\"1\">&nbsp;0.8&nbsp;秒&nbsp;</td><td colSpan=\"1\" rowSpan=\"1\">79.8&nbsp;秒&nbsp;</td></tr></tbody></table><p>&nbsp;&nbsp;<span style=\"color: rgb(225, 60, 57);\">两者开销大约相差一百倍。</span></p><p>&nbsp;这意味着，在&nbsp;Windows&nbsp;中，进程创建的开销不容忽视。换句话说就是，Windows&nbsp;编程中不建议你创建进程，如果你的程序架构需要大量创建进程，那么最好是切换到&nbsp;Linux&nbsp;系统。</p><p>大量创建进程的典型例子有两个，一个是&nbsp;gnu&nbsp;autotools&nbsp;工具链，用于编译很多开源代码的，他们在&nbsp;Windows&nbsp;下编译速度会很慢，因此软件开发人员最好是避免使用&nbsp;Windows。另一个是服务器，某些服务器框架依靠大量创建进程来干活，甚至是对每个用户请求就创建一个进程，这些服务器在&nbsp;Windows&nbsp;下运行的效率就会很差。这\"可能\"也是放眼全世界范围，Linux&nbsp;&nbsp;服务器远远多于&nbsp;Windows&nbsp;服务器的原因。</p><p>如果你是写服务器端应用的，其实在现在的网络服务模型下，开桌子的开销是可以忽略不计的，因为现在一般流行的是按照&nbsp;CPU&nbsp;核心数量开进程或者线程，开完之后在数量上一直保持，进程与线程内部使用协程或者异步通信来处理多个并发连接，因而开进程与开线程的开销可以忽略了。</p><p><strong>另外一种新的开销被提上日程：核心切换开销。</strong></p><p>现代的体系，一般&nbsp;CPU&nbsp;会有多个核心，而多个核心可以同时运行多个不同的线程或者进程。</p><p>当每个&nbsp;CPU&nbsp;核心运行一个进程的时候，由于每个进程的资源都独立，所以&nbsp;CPU&nbsp;核心之间切换的时候无需考虑上下文。</p><p>当每个&nbsp;CPU&nbsp;核心运行一个线程的时候，由于每个线程需要共享资源，所以这些资源必须从&nbsp;CPU&nbsp;的一个核心被复制到另外一个核心，才能继续运算，这占用了额外的开销。换句话说，在&nbsp;CPU&nbsp;为多核的情况下，多线程在性能上不如多进程。</p><p>因而，当前面向多核的服务器端编程中，需要习惯多进程而非多线程。</p>', '多线程的问题是多个人同时吃一道菜的时候容易发生争抢，例如两个人同时夹一个菜，一个人刚伸出筷子，结果伸到的时候已经被夹走菜了。。。此时就必须等一个人夹一口之后，在还给另外一个人夹菜，也就是说资源共享就会发生冲突争抢。', '1', '/imgs/articleCoverImg/nav_bg.jpg', '原创', 'Spring,Git,网络爬虫', 0, 1, 4, 1, 1, 1, '2022-09-12');
